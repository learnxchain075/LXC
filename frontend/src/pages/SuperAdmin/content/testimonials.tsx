import React, { useState, useEffect } from "react";
import { Link } from "react-router-dom";
import { AxiosResponse } from "axios";
import { DatePicker } from "antd";
import moment from "moment";
import { ColumnsType } from "antd/es/table";
// Internal component imports
import PredefinedDateRanges from "../../../core/common/datePicker";
import CommonSelect from "../../../core/common/commonSelect";
import { page, parent } from "../../../core/common/selectoption/selectoption";
import Table from "../../../core/common/dataTable/index";
import TooltipOption from "../../../core/common/tooltipOption";
import { all_routes } from "../../../router/all_routes";

// Service imports
import {
  getAllFeedback,
  createFeedback,
  updateFeedback,
  deleteFeedback,
  approveFeedback,
  rejectFeedback,
} from "../../../services/superadmin/feebackService";
import { ICreateFeedback } from "../../../services/types/feeback";

// Define the interface for testimonial data
interface TestimonialData {
  id: string;
  title: string;
  description: string;
  status: string;
  schoolId: string;
  author?: string;
  role?: string;
  content?: string;
  dateAdded?: string;
  avatar?: string;
}

const Testimonials: React.FC = () => {
  const routes = all_routes;

  // State management
  const [Testimonials, setTestimonials] = useState<TestimonialData[]>([]);
  const [addForm, setAddForm] = useState<Partial<TestimonialData>>({
    title: "",
    description: "",
    status: "",
    dateAdded: "",
    author: "",
    role: "",
    content: "",
  });
  const [editForm, setEditForm] = useState<Partial<TestimonialData>>({
    id: "",
    title: "",
    description: "",
    status: "",
    dateAdded: "",
    schoolId: "",
    author: "",
    role: "",
    content: "",
  });
  const [selectedTestimonialId, setSelectedTestimonialId] = useState<string | null>(null);
  const [selectedFeedback, setSelectedFeedback] = useState<TestimonialData | null>(null);
  const [viewModalOpen, setViewModalOpen] = useState(false);


  // Fetch all testimonials on component mount
  const fetchTestimonials = async () => {
    try {
      const response: AxiosResponse<ICreateFeedback[]> = await getAllFeedback();
      // console.log("feedback ", response.data);
      const mappedData: TestimonialData[] = response.data.map((feedback) => ({
        id: feedback.id,
        title: feedback.title,
        description: feedback.description,
        status: feedback.status || "pending",
        schoolId: feedback.schoolId,
        author: feedback.School?.schoolName || "Unknown School",
        content: feedback.description,
        dateAdded: new Date(feedback.createdAt || new Date().toISOString()).toISOString(),
      }));

      setTestimonials(mappedData);
      // console.log("Fetched testimonials:", mappedData);
    } catch (error) {
      console.error("Error fetching testimonials:", error);
    }
  };


  useEffect(() => {
    fetchTestimonials();
  }, []);

  // Handle form input changes
  const handleAddFormChange = (field: string, value: string) => {
    setAddForm((prev) => ({ ...prev, [field]: value }));
  };

  const handleEditFormChange = (field: string, value: string) => {
    setEditForm((prev) => ({ ...prev, [field]: value }));
  };

  // Add testimonial
  const handleAddSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      const newFeedback = {
        id: "", // Generated by server
        title: addForm.author || "",
        description: addForm.content || "",
        status: "pending",
        schoolId: "some_school_id", // Hardcoded for now; should be dynamic
      };
      await createFeedback(
        newFeedback.id,
        newFeedback.title,
        newFeedback.description,
        newFeedback.status,
        newFeedback.schoolId
      );
      fetchTestimonials(); // Refresh list
      setAddForm({}); // Reset form

      // Manually hide the modal
      const modal = document.getElementById("add_testimonials");
      if (modal) {
        const modalInstance = (modal as any).modalInstance;
        if (modalInstance) modalInstance.hide();
      }
    } catch (error) {
      console.error("Error adding testimonial:", error);
    }
  };

  // Edit testimonial
  const handleEditSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    try {
      await updateFeedback(
        editForm.id || "",
        editForm.title || "",
        editForm.description || "",
        editForm.status || "pending",
        editForm.schoolId || "some_school_id"
      );
      fetchTestimonials();

      // Manually hide the modal
      const modal = document.getElementById("edit_testimonials");
      if (modal) {
        const modalInstance = (modal as any).modalInstance;
        if (modalInstance) modalInstance.hide();
      }
    } catch (error) {
      console.error("Error updating testimonial:", error);
    }
  };

  // Delete testimonial
  const handleDelete = async () => {
    if (!selectedTestimonialId) return;
    try {
      await deleteFeedback(selectedTestimonialId);
      fetchTestimonials();

      // Manually hide the modal
      const modal = document.getElementById("delete-modal");
      if (modal) {
        const modalInstance = (modal as any).modalInstance;
        if (modalInstance) modalInstance.hide();
      }
    } catch (error) {
      console.error("Error deleting testimonial:", error);
    }
  };

  // Approve testimonial
  const handleApprove = async () => {
    if (!selectedTestimonialId) return;
    try {
      await approveFeedback(selectedTestimonialId);
      fetchTestimonials();

      // Manually hide the modal
      const modal = document.getElementById("action-modal");
      if (modal) {
        const modalInstance = (modal as any).modalInstance;
        if (modalInstance) modalInstance.hide();
      }
    } catch (error) {
      console.error("Error approving testimonial:", error);
    }
  };

  // Reject testimonial
  const handleReject = async () => {
    if (!selectedTestimonialId) return;
    try {
      await rejectFeedback(selectedTestimonialId);
      fetchTestimonials();

      // Manually hide the modal
      const modal = document.getElementById("action-modal");
      if (modal) {
        const modalInstance = (modal as any).modalInstance;
        if (modalInstance) modalInstance.hide();
      }
    } catch (error) {
      console.error("Error rejecting testimonial:", error);
    }
  };

  // Open edit modal with pre-filled data
  const openEditModal = (testimonial: TestimonialData) => {
    setEditForm({
      id: testimonial.id,
      title: testimonial.title,
      description: testimonial.description,
      status: testimonial.status || "pending",
      schoolId: testimonial.schoolId || "some_school_id",
      author: testimonial.author || "",
      role: testimonial.role || "",
      content: testimonial.description,
      dateAdded: testimonial.dateAdded || new Date().toISOString(),
    });
  };

  // Table columns
  const columns: ColumnsType<TestimonialData> = [
    {
      title: "School Name",
      dataIndex: "author",
      sorter: (a: TestimonialData, b: TestimonialData) =>
        (a.author || "").localeCompare(b.author || ""),
      render: (author: string) => (
        <Link to="#" className="link-primary">{author || "Unknown"}</Link>
      ),
    },
    {
      title: "Title",
      dataIndex: "title",
      sorter: (a, b) => a.title.localeCompare(b.title),
      render: (title: string) => (
        <div className="d-flex align-items-center">
          <div className="ms-2">
            <p className="text-dark mb-0">
              <Link to="#">{title}</Link>
            </p>
          </div>
        </div>
      ),
    },
    {
      title: "Description",
      dataIndex: "description",
      render: (_: any, record: TestimonialData) => {
        const words = record.description.trim().split(" ");
        const preview = words.slice(0, 5).join(" ");
        const truncated = words.length > 5;
        return (
          <Link
            to="#"
            onClick={(e) => {
              e.preventDefault();
              setSelectedFeedback(record);
              setViewModalOpen(true);
            }}
          >
            {truncated ? `${preview}...` : record.description}
          </Link>
        );
      },
    },
    {
      title: "Status",
      dataIndex: "status",
      sorter: (a, b) => a.status.localeCompare(b.status),
    },
    {
      title: "Action",
      dataIndex: "action",
      render: (_: any, record: TestimonialData) => (
        <div className="d-flex align-items-center">
          <div className="dropdown">
            <Link
              to="#"
              className="btn btn-white btn-icon btn-sm d-flex align-items-center justify-content-center rounded-circle p-0"
              data-bs-toggle="dropdown"
              aria-expanded="false"
            >
              <i className="ti ti-dots-vertical fs-14" />
            </Link>
            <ul className="dropdown-menu dropdown-menu-right p-3">
              <li>
                <Link
                  className="dropdown-item rounded-1"
                  to="#"
                  data-bs-toggle="modal"
                  data-bs-target="#edit_testimonials"
                  onClick={() => openEditModal(record)}
                >
                  <i className="ti ti-edit-circle me-2" /> Edit
                </Link>
              </li>
              <li>
                <Link
                  className="dropdown-item rounded-1"
                  to="#"
                  data-bs-toggle="modal"
                  data-bs-target="#delete-modal"
                  onClick={() => setSelectedTestimonialId(record.id)}
                >
                  <i className="ti ti-trash-x me-2" /> Delete
                </Link>
              </li>
              <li>
                <Link
                  className="dropdown-item rounded-1"
                  to="#"
                  data-bs-toggle="modal"
                  data-bs-target="#action-modal"
                  onClick={() => setSelectedTestimonialId(record.id)}
                >
                  <i className="ti ti-check me-2" /> Permission
                </Link>
              </li>
            </ul>
          </div>
        </div>
      ),
    },
  ];
  // { console.log("table data",Testimonials)}
  return (
    <div>
      {/* Page Wrapper */}
      <div className="page-wrapper">
        <div className="content">
          {/* Page Header */}
          <div className="d-md-flex d-block align-items-center justify-content-between mb-3">
            <div className="my-auto mb-2">
              <h3 className="page-title mb-1">Testimonials</h3>
              <nav>
                <ol className="breadcrumb mb-0">
                  <li className="breadcrumb-item">
                    <Link to={routes.adminDashboard}>Dashboard</Link>
                  </li>
                  <li className="breadcrumb-item">
                    <Link to="#">Content</Link>
                  </li>
                  <li className="breadcrumb-item active" aria-current="page">
                    Testimonials
                  </li>
                </ol>
              </nav>
            </div>
            <div className="d-flex my-xl-auto right-content align-items-center flex-wrap">
              <TooltipOption />
              <div className="mb-2">
                <Link
                  to="#"
                  className="btn btn-primary"
                  data-bs-toggle="modal"
                  data-bs-target="#add_testimonials"
                >
                  <i className="ti ti-square-rounded-plus-filled me-2" />
                  Add Testimonials
                </Link>
              </div>
            </div>
          </div>
          {/* /Page Header */}
          <div className="card">
            <div className="card-header d-flex align-items-center justify-content-between flex-wrap pb-0">
              <h4 className="mb-3">Testimonials List</h4>
              <div className="d-flex align-items-center flex-wrap">
                <div className="input-icon-start mb-3 me-2 position-relative">
                  <PredefinedDateRanges />
                </div>
                <div className="dropdown mb-3 me-2">
                  <Link
                    to="#"
                    className="btn btn-outline-light bg-white dropdown-toggle"
                    data-bs-toggle="dropdown"
                    data-bs-auto-close="outside"
                  >
                    <i className="ti ti-filter me-2" />
                    Filter
                  </Link>
                  <div className="dropdown-menu drop-width">
                    <form>
                      <div className="d-flex align-items-center border-bottom p-3">
                        <h4>Filter</h4>
                      </div>
                      <div className="p-3 border-bottom">
                        <div className="row">
                          <div className="col-md-12">
                            <div className="mb-3">
                              <label className="form-label">Author</label>
                              <CommonSelect
                                className="select"
                                options={parent}
                                defaultValue={parent[0]}
                              />
                            </div>
                          </div>
                          <div className="col-md-12">
                            <div className="mb-0">
                              <label className="form-label">Role</label>
                              <CommonSelect
                                className="select"
                                options={page}
                                defaultValue={page[0]}
                              />
                            </div>
                          </div>
                        </div>
                      </div>
                      <div className="p-3 d-flex align-items-center justify-content-end">
                        <Link to="#" className="btn btn-light me-3">
                          Reset
                        </Link>
                        <button type="submit" className="btn btn-primary">
                          Apply
                        </button>
                      </div>
                    </form>
                  </div>
                </div>
                <div className="dropdown mb-3">
                  <Link
                    to="#"
                    className="btn btn-outline-light bg-white dropdown-toggle"
                    data-bs-toggle="dropdown"
                  >
                    <i className="ti ti-sort-ascending-2 me-2" />
                    Sort by A-Z
                  </Link>
                  <ul className="dropdown-menu p-3">
                    <li>
                      <Link to="#" className="dropdown-item rounded-1 active">
                        Ascending
                      </Link>
                    </li>
                    <li>
                      <Link to="#" className="dropdown-item rounded-1">
                        Descending
                      </Link>
                    </li>
                    <li>
                      <Link to="#" className="dropdown-item rounded-1">
                        Recently Viewed
                      </Link>
                    </li>
                    <li>
                      <Link to="#" className="dropdown-item rounded-1">
                        Recently Added
                      </Link>
                    </li>
                  </ul>
                </div>
              </div>
            </div>

            <div className="card-body p-0 py-3">
              {/* Testimonials List */}

              <Table dataSource={Testimonials} columns={columns} key="id" Selection={true} />
              {/* /Testimonials List */}
            </div>
          </div>
        </div>
      </div>
      {/* /Page Wrapper */}

      {/* View Feedback Modal */}
      <div className={`modal fade ${viewModalOpen ? "show d-block" : ""}`} id="view_feedback" tabIndex={-1} aria-hidden={!viewModalOpen}>
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Feedback Details</h4>
              <button type="button" className="btn-close custom-btn-close" onClick={() => setViewModalOpen(false)} aria-label="Close">
                <i className="ti ti-x" />
              </button>
            </div>
            <div className="modal-body">
              {selectedFeedback && (
                <div>
                  <p><strong>School:</strong> {selectedFeedback.author}</p>
                  <p><strong>Title:</strong> {selectedFeedback.title}</p>
                  <p><strong>Description:</strong> {selectedFeedback.description}</p>
                  <p><strong>Status:</strong> {selectedFeedback.status}</p>
                  {selectedFeedback.dateAdded && (
                    <p><strong>Date:</strong> {moment(selectedFeedback.dateAdded).format('DD MMM YYYY')}</p>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>

      {/* Add Testimonials Modal */}
      <div className="modal fade" id="add_testimonials">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Add Testimonial</h4>
              <button
                type="button"
                className="btn-close custom-btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            <form onSubmit={handleAddSubmit}>
              <div className="modal-body">
                <div className="row">
                  <div className="col-md-12">
                    <div className="mb-3">
                      <label className="form-label">Author</label>
                      <input
                        type="text"
                        className="form-control"
                        value={addForm.author || ""}
                        onChange={(e) => handleAddFormChange("author", e.target.value)}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Role</label>
                      <input
                        type="text"
                        className="form-control"
                        value={addForm.role || ""}
                        onChange={(e) => handleAddFormChange("role", e.target.value)}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Date Added</label>
                      <div className="date-pic">
                        <DatePicker
                          className="form-control datetimepicker"
                          placeholder="Select Date"
                          onChange={(date, dateString) =>
                            handleAddFormChange(
                              "dateAdded",
                              Array.isArray(dateString) ? dateString[0] : dateString
                            )
                          }
                        />
                        <span className="cal-icon">
                          <i className="ti ti-calendar" />
                        </span>
                      </div>
                    </div>
                    <div className="mb-0">
                      <label className="form-label">Content</label>
                      <textarea
                        className="form-control"
                        rows={4}
                        value={addForm.content || ""}
                        onChange={(e) => handleAddFormChange("content", e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light me-2" data-bs-dismiss="modal">
                  Cancel
                </Link>
                <button type="submit" className="btn btn-primary">
                  Add Testimonial
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      {/* /Add Testimonials Modal */}

      {/* Edit Testimonials Modal */}
      <div className="modal fade" id="edit_testimonials">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-header">
              <h4 className="modal-title">Edit Testimonial</h4>
              <button
                type="button"
                className="btn-close custom-btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              >
                <i className="ti ti-x" />
              </button>
            </div>
            <form onSubmit={handleEditSubmit}>
              <div className="modal-body">
                <div className="row">
                  <div className="col-md-12">
                    <div className="mb-3">
                      <label className="form-label">Author</label>
                      <input
                        type="text"
                        className="form-control"
                        value={editForm.author || ""}
                        onChange={(e) => handleEditFormChange("author", e.target.value)}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Role</label>
                      <input
                        type="text"
                        className="form-control"
                        value={editForm.role || ""}
                        onChange={(e) => handleEditFormChange("role", e.target.value)}
                      />
                    </div>
                    <div className="mb-3">
                      <label className="form-label">Date Added</label>
                      <div className="date-pic">
                        <DatePicker
                          className="form-control datetimepicker"
                          placeholder="Select Date"
                          value={editForm.dateAdded ? moment(editForm.dateAdded) : null}
                          onChange={(date, dateString) =>
                            handleEditFormChange(
                              "dateAdded",
                              Array.isArray(dateString) ? dateString[0] : dateString
                            )
                          }
                        />
                        <span className="cal-icon">
                          <i className="ti ti-calendar" />
                        </span>
                      </div>
                    </div>
                    <div className="mb-0">
                      <label className="form-label">Content</label>
                      <textarea
                        className="form-control"
                        rows={4}
                        value={editForm.content || ""}
                        onChange={(e) => handleEditFormChange("content", e.target.value)}
                      />
                    </div>
                  </div>
                </div>
              </div>
              <div className="modal-footer">
                <Link to="#" className="btn btn-light me-2" data-bs-dismiss="modal">
                  Cancel
                </Link>
                <button type="submit" className="btn btn-primary">
                  Save Changes
                </button>
              </div>
            </form>
          </div>
        </div>
      </div>
      {/* /Edit Testimonials Modal */}

      {/* Permission Modal */}
      <div className="modal fade" id="action-modal">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-body text-center">
              <span className="action-icon">
                <i className="ti ti-help" />
              </span>
              <h4>Confirm Action</h4>
              <p>Do you want to approve or reject this testimonial?</p>
              <div className="d-flex justify-content-center">
                <button type="button" className="btn btn-success me-2" onClick={handleApprove}>
                  Approve
                </button>
                <button type="button" className="btn btn-danger me-2" onClick={handleReject}>
                  Reject
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* /Permission Modal */}

      {/* Delete Modal */}
      <div className="modal fade" id="delete-modal">
        <div className="modal-dialog modal-dialog-centered">
          <div className="modal-content">
            <div className="modal-body text-center">
              <span className="delete-icon">
                <i className="ti ti-trash-x" />
              </span>
              <h4>Confirm Deletion</h4>
              <p>You want to delete this testimonial? This can't be undone.</p>
              <div className="d-flex justify-content-center">
                <Link to="#" className="btn btn-light me-3" data-bs-dismiss="modal">
                  Cancel
                </Link>
                <button type="button" className="btn btn-danger" onClick={handleDelete}>
                  Yes, Delete
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
      {/* /Delete Modal */}
    </div>
  );
};

export default Testimonials;